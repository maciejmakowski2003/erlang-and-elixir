# elixir basics

## Section

```elixir
map = %{:key1 => 1, 3 => 4}
Map.put(map, 5, 6)
```

```elixir
for x <- [1, 2, 3, 4], do: rem(x, 2)
for x <- [1, 2, 3, 4], do: x * x
```

```elixir
for {_k, v} <- %{:key1 => 1, 3 => 4} do
  v
end
```

```elixir
for x <- [1, 2], y <- [3, 4], do: {x * y, x, y}
```

```elixir
for x <- [1, 2], y <- [3, 4], into: %{}, do: {x, y}
```

```elixir
if 1 == 1 do
  "yes"
else
  "no"
end
```

```elixir
if 2 == 1 do
  "yes"
end
```

```elixir
# jak w erlangu
cond do
  1 == 2 -> "xd"
  true -> "yes"
end
```

```elixir
a = -1

case a do
  x when x > 0 -> "yes"
  _ -> "no"
end
```

```elixir
defmodule Hi do
  # exported function
  def hello(name) do
    hello(name, "12")
  end

  # private function
  defp hello(name, age) do
    "Hello " <> name <> " " <> age
  end
end

Hi.hello("Maciek")
```

```elixir
z = "makota"
"Ala #{z}"
```

```elixir
defmodule ABC do
  def f(a \\ 2, b) do
    a + b
  end
end

ABC.f(1)
```

```elixir
sum = fn a, b -> a + b end
sum.(1, 3)
# sum(1,3) does not work

# alternative declaration for anonymous f
sum2 = &(&1 + &2)
sum2.(1, 4)
```

```elixir
# function address
g = &ABC.f/1
g.(1)
```

```elixir
String.split(String.upcase("ala ma kota"))

# pipe
"ala ma kota" |> String.upcase() |> String.split()
```

```elixir
to_string(Enum.map(String.to_charlist("ala ma kota"), &(&1 + 1)))

"ala ma kota" |> String.to_charlist() |> Enum.map(&(&1 + 1)) |> to_string
```

```elixir
defmodule User do
  defstruct name: "", age: 27
end
```

```elixir
%User{age: 23, name: "John"}
```
